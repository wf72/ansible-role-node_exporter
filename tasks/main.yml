---
- name: Check current node_exporter version.
  command: "{{ node_exporter_bin_path }} --version"
  failed_when: false
  changed_when: false
  register: node_exporter_version_check

- name: Configure latest version
  include_tasks: config-version.yaml
  when: >
    node_exporter_version is match("latest")
    or node_exporter_version is not defined

- name: Download and unarchive node_exporter into temporary location.
  unarchive:
    src: "{{ node_exporter_download_url }}"
    dest: /tmp
    remote_src: true
    mode: 0755
  when: >
    node_exporter_version_check.stdout is not defined
    or node_exporter_version not in node_exporter_version_check.stdout
  register: node_exporter_download_check

- name: Move node_exporter binary into place.
  copy:
    src: "/tmp/node_exporter-{{ node_exporter_version }}.linux-{{ node_exporter_arch }}/node_exporter"
    dest: "{{ node_exporter_bin_path }}"
    mode: 0755
    remote_src: true
  notify: restart node_exporter
  when: >
    node_exporter_download_check is changed
    or node_exporter_version_check.stdout | length == 0

- name: Create node_exporter user.
  user:
    name: "{{ node_exporter_user }}"
    shell: /sbin/nologin
    state: present

- name: Generate selfsignet tls certificate
  include_tasks: tls.yml
  when: 
    - node_exporter_selfsigned_tls
    - node_exporter_tls_server_config.key_file is defined
    - node_exporter_tls_server_config.cert_file is defined

- name: Create node_exporter config directory
  ansible.builtin.file:
    path: "{{ node_exporter_config_dir }}"
    state: directory
    owner: "{{ node_exporter_user }}"
    group: "{{ node_exporter_group }}"
    mode: u+rwX,g+rwX,o=rX

- name: Copy the node_exporter config file
  ansible.builtin.template:
    src: config.yaml.j2
    dest: "{{ node_exporter_config_path }}"
    owner: "{{ node_exporter_user }}"
    group: "{{ node_exporter_group }}"
    mode: 0644
  notify: restart node_exporter

- name: Copy the node_exporter systemd unit file.
  template:
    src: node_exporter.service.j2
    dest: /etc/systemd/system/node_exporter.service
    mode: 0644
  register: node_exporter_service

- name: Reload systemd daemon if unit file is changed.
  systemd:
    daemon_reload: true
  notify: restart node_exporter
  when: node_exporter_service is changed

- name: Ensure node_exporter is running and enabled at boot.
  service:
    name: node_exporter
    state: "{{ node_exporter_state }}"
    enabled: "{{ node_exporter_enabled }}"

- name: Register http scheme
  set_fact:
    node_exporter_scheme: "{% if node_exporter_tls_server_config %}https{% else %}http{% endif %}"

- name: Register http auth username
  set_fact:
    node_exporter_http_username: "{{ node_exporter_basic_auth_users.keys() | first }}"
  when: node_exporter_basic_auth_users.keys() | first is defined

- name: Register http auth password
  set_fact:
    node_exporter_http_password: "{{ node_exporter_basic_auth_users[node_exporter_http_username] }}"
  when: node_exporter_http_username is defined

- name: Verify node_exporter is responding to requests.
  uri:
    url: "{{ node_exporter_scheme }}://{% if node_exporter_host !='' %}{{ node_exporter_host }}{% else %}localhost{% endif %}:{{ node_exporter_port }}/"
    force_basic_auth: "{{ true if node_exporter_http_username is defined else omit }}"
    url_username: "{{ node_exporter_http_username if node_exporter_http_username is defined else omit }}"
    url_password: "{{ node_exporter_http_password if node_exporter_http_password is defined else omit }}"
    return_content: true
    validate_certs: false
  register: metrics_output
  failed_when: "'Metrics' not in metrics_output.content"
